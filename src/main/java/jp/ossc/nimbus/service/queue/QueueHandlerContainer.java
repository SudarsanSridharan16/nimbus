/*
 * This software is distributed under following license based on modified BSD
 * style license.
 * ----------------------------------------------------------------------
 * 
 * Copyright 2003 The Nimbus Project. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE NIMBUS PROJECT ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE NIMBUS PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the Nimbus Project.
 */
package jp.ossc.nimbus.service.queue;

/**
 * QueueHandlerコンテナ。<p>
 * 
 * @author M.Takata
 */
public interface QueueHandlerContainer extends Queue{
    
    /**
     * QueueHandlerを設定する。<p>
     *
     * @param handler QueueHandler
     */
    public void setQueueHandler(QueueHandler handler);
    
    /**
     * QueueHandlerを取得する。<p>
     *
     * @return QueueHandler
     */
    public QueueHandler getQueueHandler();
    
    /**
     * ハンドリングの際にエラーが発生した事を通知するログのメッセージIDを設定する。<p>
     *
     * @param id ログのメッセージID
     */
    public void setHandlingErrorMessageId(String id);
    
    /**
     * ハンドリングの際にエラーが発生し、リトライ回数を越えた事を通知するログのメッセージIDを設定する。<p>
     *
     * @param id ログのメッセージID
     */
    public void setRetryOverErrorMessageId(String id);
    
    /**
     * ハンドリングの際にエラーが発生した場合にリトライする回数を設定する。<p>
     *
     * @param count リトライ回数
     */
    public void setMaxRetryCount(int count);
    
    /**
     * ハンドリングの際にエラーが発生した場合にリトライする間隔を設定する。<p>
     *
     * @param interval リトライ間隔
     */
    public void setRetryInterval(long interval);
    
    /**
     * 開始する。<p>
     */
    public void start() throws Exception;
    
    /**
     * 停止する。<p>
     */
    public void stop();
    
    /**
     * キューを待ち受ける{@link QueueHandler}スレッドの数を取得する。<p>
     *
     * @return QueueHandlerスレッドの数
     */
    public int getQueueHandlerSize();
    
    /**
     * 現在ハンドリング中のスレッド数を取得する。<p>
     *
     * @return 現在ハンドリング中のスレッド数
     */
    public int getActiveQueueHandlerSize();
    
    /**
     * 現在待機中のスレッド数を取得する。<p>
     *
     * @return 現在待機中のスレッド数
     */
    public int getStandbyQueueHandlerSize();
    
    /**
     * キューから引き抜いた後の処理時間の平均を取得する。<p>
     *
     * @return 平均処理時間[ms]
     */
    public long getAverageHandleProcessTime();
}
